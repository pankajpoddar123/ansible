By default, if a task fails, the play is aborted. However, this behavior can be overridden by ignoring
failed tasks. You can use the ignore_errors keyword in a task to accomplish this.
The following snippet shows how to use ignore_errors in a task to continue playbook execution
on the host even if the task fails. For example, if the notapkg package does not exist then the
ansible.builtin.dnf module fails, but having ignore_errors set to yes allows execution
to continue.

[ansible@ansible playbook]$ cat playbook27.yml
---
- name: Playbook to demostrate ignore_errors
  hosts: web
  tasks:
    - name: Installing the random package to throw error
      dnf:
        name: nopackage
        state: present
      ignore_errors: true
    - name: Play to display  a message
      debug:
        msg: This task is executed even the above task  is failed
[ansible@ansible playbook]$

[ansible@ansible playbook]$ ansible-playbook playbook27.yml

PLAY [Playbook to demostrate ignore_errors] *****************************************************************************************************************

TASK [Gathering Facts] **************************************************************************************************************************************
ok: [node2]
ok: [node1]

TASK [Installing the random package to throw error] *********************************************************************************************************
fatal: [node1]: FAILED! => {"changed": false, "failures": ["No package nopackage available."], "msg": "Failed to install some of the specified packages", "rc": 1, "results": []}
...ignoring
fatal: [node2]: FAILED! => {"changed": false, "failures": ["No package nopackage available."], "msg": "Failed to install some of the specified packages", "rc": 1, "results": []}
...ignoring

PLAY RECAP **************************************************************************************************************************************************
node1                      : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=1
node2                      : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=1

[ansible@ansible playbook]$ vi playbook27.yml
[ansible@ansible playbook]$ ansible-playbook playbook27.yml

PLAY [Playbook to demostrate ignore_errors] *****************************************************************************************************************

TASK [Gathering Facts] **************************************************************************************************************************************
ok: [node1]
ok: [node2]

TASK [Installing the random package to throw error] *********************************************************************************************************
fatal: [node1]: FAILED! => {"changed": false, "failures": ["No package nopackage available."], "msg": "Failed to install some of the specified packages", "rc": 1, "results": []}
...ignoring
fatal: [node2]: FAILED! => {"changed": false, "failures": ["No package nopackage available."], "msg": "Failed to install some of the specified packages", "rc": 1, "results": []}
...ignoring

TASK [Play to display  a message] ***************************************************************************************************************************
ok: [node1] => {
    "msg": "This task is executed even the above task  is failed"
}
ok: [node2] => {
    "msg": "This task is executed even the above task  is failed"
}

PLAY RECAP **************************************************************************************************************************************************
node1                      : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=1
node2                      : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=1



